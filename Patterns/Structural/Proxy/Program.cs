using Pattern;

// Суть шаблона Proxy - замещение исходного класса,
// который мы не имеем права изменять, на класс реализующий с помощью
// исходного класса дополнительную логику.

// Это может быть логгирование и кэширование как в данном варианте.
// Соответственно кэширование может быть защитного свойства
// (При доступе к объекту происходит запрос прав доступа)

// Создаем шефа и передаем в него прокси в которую помещаем исходный класс
ChiefProxy chief = new(new Chief());

Console.WriteLine("Welcome to Cooker!\n");
Console.WriteLine("========= Orders =========\n");

// Для каждого заказа
foreach (Order order in chief.GetOrders())
{
    // Получаем возможные статусы заказов
    string status = chief.GetStatuses().First(s => s.Key == order.StatusId).Value;

    // Выводим состояние данного заказа
    Console.WriteLine($"{order.Name}\t\t{status}");
}